{"version":3,"file":"4.index.js","sources":["webpack:///4.index.js"],"sourcesContent":["(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{1289:function(e,t,r){\"use strict\";r.r(t),r.d(t,\"default\",function(){return PackbitsDecoder});class PackbitsDecoder extends r(688).a{decodeBlock(e){const n=new DataView(e),o=[];for(let r=0;r<e.byteLength;++r){let t=n.getInt8(r);if(t<0){var i=n.getUint8(r+1);t=-t;for(let e=0;e<=t;++e)o.push(i);r+=1}else{for(let e=0;e<=t;++e)o.push(n.getUint8(r+e+1));r+=t+1}}return new Uint8Array(o).buffer}}},688:function(e,t,r){\"use strict\";function applyPredictor(r,n,o,e,i,t){if(!n||1===n)return r;for(let e=0;e<i.length;++e){if(i[e]%8!=0)throw new Error(\"When decoding with predictor, only multiple of 8 bits are supported.\");if(i[e]!==i[0])throw new Error(\"When decoding with predictor, all samples must have the same size.\")}var a=i[0]/8,c=2===t?1:i.length;for(let t=0;t<e&&!(t*c*o*a>=r.byteLength);++t){let e;if(2===n){switch(i[0]){case 8:e=new Uint8Array(r,t*c*o*a,c*o*a);break;case 16:e=new Uint16Array(r,t*c*o*a,c*o*a/2);break;case 32:e=new Uint32Array(r,t*c*o*a,c*o*a/4);break;default:throw new Error(`Predictor 2 not allowed with ${i[0]} bits per sample.`)}!function decodeRowAcc(t,r){let e=t.length-r,n=0;do{for(let e=r;0<e;e--)t[n+r]+=t[n],n++}while(0<(e-=r))}(e,c)}else 3===n&&!function decodeRowFloatingPoint(r,t,n){let o=0,e=r.length;for(var i=e/n;e>t;){for(let e=t;0<e;--e)r[o+t]+=r[o],++o;e-=t}var a=r.slice();for(let t=0;t<i;++t)for(let e=0;e<n;++e)r[n*t+e]=a[(n-e-1)*i+t]}(e=new Uint8Array(r,t*c*o*a,c*o*a),c,a)}return r}r.d(t,\"a\",function(){return basedecoder_BaseDecoder});class basedecoder_BaseDecoder{async decode(e,t){var t=await this.decodeBlock(t),r=e.Predictor||1;return 1!==r?applyPredictor(t,r,(r=!e.StripOffsets)?e.TileWidth:e.ImageWidth,r?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration):t}}}}]);"],"mappings":"AAAA","sourceRoot":""}