% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrappers_csv.R
\docType{class}
\name{CsvWrapper}
\alias{CsvWrapper}
\title{CsvWrapper Class}
\description{
Class representing a CSV file in a Vitessce dataset.
}
\details{
CSV file wrapper class
}
\keyword{internal}
\section{Super class}{
\code{\link[vitessceR:AbstractWrapper]{vitessceR::AbstractWrapper}} -> \code{CsvWrapper}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{csv_path}}{The object to wrap.}

\item{\code{csv_url}}{The object to wrap.}

\item{\code{local_csv_uid}}{The path to the local zarr store.}

\item{\code{data_type}}{The Vitessce data type for this file.}

\item{\code{options}}{A list of options to pass to the Vitessce file definition.}

\item{\code{coordination_values}}{A list of coordination values to pass to the Vitessce file definition.}

\item{\code{request_init}}{A list of requestInit values to pass to fetch when loading the CSV over HTTP.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CsvWrapper-new}{\code{CsvWrapper$new()}}
\item \href{#method-CsvWrapper-convert_and_save}{\code{CsvWrapper$convert_and_save()}}
\item \href{#method-CsvWrapper-make_routes}{\code{CsvWrapper$make_routes()}}
\item \href{#method-CsvWrapper-get_csv_url}{\code{CsvWrapper$get_csv_url()}}
\item \href{#method-CsvWrapper-make_file_def_creator}{\code{CsvWrapper$make_file_def_creator()}}
\item \href{#method-CsvWrapper-clone}{\code{CsvWrapper$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="auto_view_config"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-auto_view_config'><code>vitessceR::AbstractWrapper$auto_view_config()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_file_defs"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_file_defs'><code>vitessceR::AbstractWrapper$get_file_defs()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_local_dir_route"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_local_dir_route'><code>vitessceR::AbstractWrapper$get_local_dir_route()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_local_dir_url"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_local_dir_url'><code>vitessceR::AbstractWrapper$get_local_dir_url()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_local_file_route"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_local_file_route'><code>vitessceR::AbstractWrapper$get_local_file_route()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_local_file_url"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_local_file_url'><code>vitessceR::AbstractWrapper$get_local_file_url()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_out_dir"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_out_dir'><code>vitessceR::AbstractWrapper$get_out_dir()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_out_dir_route"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_out_dir_route'><code>vitessceR::AbstractWrapper$get_out_dir_route()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_route_str"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_route_str'><code>vitessceR::AbstractWrapper$get_route_str()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_routes"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_routes'><code>vitessceR::AbstractWrapper$get_routes()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_url"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_url'><code>vitessceR::AbstractWrapper$get_url()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vitessceR" data-topic="AbstractWrapper" data-id="get_url_simple"><a href='../../vitessceR/html/AbstractWrapper.html#method-AbstractWrapper-get_url_simple'><code>vitessceR::AbstractWrapper$get_url_simple()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CsvWrapper-new"></a>}}
\if{latex}{\out{\hypertarget{method-CsvWrapper-new}{}}}
\subsection{Method \code{new()}}{
Create a wrapper around a CSV file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CsvWrapper$new(
  csv_path = NA,
  csv_url = NA,
  data_type = NA,
  options = NA,
  coordination_values = NA,
  request_init = NA,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{csv_path}}{The path to a local CSV file.}

\item{\code{csv_url}}{The URL to a remote CSV file.}

\item{\code{data_type}}{The Vitessce data type for this file.}

\item{\code{options}}{A list of options to pass to the Vitessce file definition.}

\item{\code{coordination_values}}{A list of coordination values to pass to the Vitessce file definition.}

\item{\code{request_init}}{A list of requestInit values to pass to fetch when loading the CSV over HTTP.}

\item{\code{...}}{Parameters inherited from \code{AbstractWrapper}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{CsvWrapper} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CsvWrapper-convert_and_save"></a>}}
\if{latex}{\out{\hypertarget{method-CsvWrapper-convert_and_save}{}}}
\subsection{Method \code{convert_and_save()}}{
Create the JSON output files, web server routes, and file definition creators.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CsvWrapper$convert_and_save(dataset_uid, obj_i, base_dir = NA)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset_uid}}{The ID for this dataset.}

\item{\code{obj_i}}{The index of this data object within the dataset.}

\item{\code{base_dir}}{A base directory for local data.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CsvWrapper-make_routes"></a>}}
\if{latex}{\out{\hypertarget{method-CsvWrapper-make_routes}{}}}
\subsection{Method \code{make_routes()}}{
Get a list of server route objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CsvWrapper$make_routes(dataset_uid, obj_i)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset_uid}}{The ID for this dataset.}

\item{\code{obj_i}}{The index of this data object within the dataset.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CsvWrapper-get_csv_url"></a>}}
\if{latex}{\out{\hypertarget{method-CsvWrapper-get_csv_url}{}}}
\subsection{Method \code{get_csv_url()}}{
Get the URL to the Zarr store, to fill in the file URL in the file definitions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CsvWrapper$get_csv_url(base_url, dataset_uid, obj_i)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{base_url}}{The base URL, on which the route will be served.}

\item{\code{dataset_uid}}{The ID for this dataset.}

\item{\code{obj_i}}{The index of this data object within the dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A URL as a string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CsvWrapper-make_file_def_creator"></a>}}
\if{latex}{\out{\hypertarget{method-CsvWrapper-make_file_def_creator}{}}}
\subsection{Method \code{make_file_def_creator()}}{
Make the file definition creator function for the cells data type.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CsvWrapper$make_file_def_creator(dataset_uid, obj_i)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset_uid}}{The ID for this dataset.}

\item{\code{obj_i}}{The index of this data object within the dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A file definition creator function which takes a \code{base_url} parameter.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CsvWrapper-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CsvWrapper-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CsvWrapper$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
